# Hyperparameters follow Dabney et al. (2017) but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
# import dopamine.jax.agents.quantile.quantile_agent
import ensemble_rl.agents.boot_quantile_agent
import dopamine.discrete_domains.atari_lib
import dopamine.discrete_domains.run_experiment
# import dopamine.replay_memory.prioritized_replay_buffer
import dopamine.replay_memory.circular_replay_buffer

JaxBootQuantileAgent.summary_writing_frequency = 125000
JaxBootQuantileAgent.kappa = 1.0
JaxBootQuantileAgent.num_atoms = 200
JaxBootQuantileAgent.gamma = 0.99
JaxBootQuantileAgent.update_horizon = 3
JaxBootQuantileAgent.min_replay_history = 20000 # agent steps
JaxBootQuantileAgent.update_period = 4
JaxBootQuantileAgent.target_update_period = 8000 # agent steps
JaxBootQuantileAgent.epsilon_train = 0.01
JaxBootQuantileAgent.epsilon_eval = 0.001
JaxBootQuantileAgent.epsilon_decay_period = 250000 # agent steps
# JaxBootQuantileAgent.replay_scheme = 'prioritized'
JaxBootQuantileAgent.replay_scheme = 'uniform'
JaxBootQuantileAgent.optimizer = 'adam'
JaxBootQuantileAgent.ensemble_size = 10
JaxBootQuantileAgent.tandem = False
JaxBootQuantileAgent.active_prob = None

create_optimizer.learning_rate = 0.00005
create_optimizer.eps = 0.0003125

atari_lib.create_atari_environment.game_name = 'Pong'
atari_lib.create_atari_environment.sticky_actions = True
# create_runner.schedule = 'continuous_train'
# create_agent.agent_name = 'jax_quantile'
# create_agent.debug_mode = True
ensemble_rl.run_experiment.create_agent_custom.agent_name = 'boot_quantile'
Runner.num_iterations = 200
Runner.training_steps = 250000
Runner.evaluation_steps = 125000
Runner.max_steps_per_episode = 27000

OutOfGraphReplayBuffer.replay_capacity = 1000000
OutOfGraphReplayBuffer.batch_size = 32

Checkpointer.checkpoint_frequency = 10
Checkpointer.checkpoint_duration = 1
OutOfGraphReplayBuffer.checkpoint_duration = 1
VectorizedOutOfGraphReplayBuffer.checkpoint_frequency = 10
EnsembleRunner.save_checkpoint = True
EnsembleRunner.clean_final_checkpoint = False
CollectorDispatcher.collectors = ('console', 'json')
